@using Microsoft.AspNetCore.Identity
@using ChatRPG.Data.Models
@using CampaignModel = ChatRPG.Data.Models.Campaign;
@using System.Security.Authentication
@using ChatRPG.Data
@using ChatRPG.Services
@using Microsoft.AspNetCore.Mvc
@inherits ComponentBase
@inject AuthenticationStateProvider AuthProvider
@inject UserManager<User> UserManager
@inject IPersisterService PersisterService

<div class="container">
    @if (User is not null)
    {
        <div class="row gap-3">
            <div class="col rounded bg-light">
                <h3>Your Campaigns</h3>
                <div class="vstack">
                    @foreach (CampaignModel campaign in Campaigns)
                    {
                        <div class="card" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@campaign.Title</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@campaign.Characters.First(c => c.IsPlayer).Name</h6>
                                <p class="card-text text-truncate">@(campaign.CustomStartScenario ?? campaign.StartScenario?.Body ?? "No scenario")</p>
                                <p class="card-text">Started @campaign.StartedOn.ToShortDateString()</p>
                                <a href="#" class="card-link">See more ></a>
                            </div>
                        </div>
                    }
                </div>
                <p class="text-muted">Found @(Campaigns.Count) campaign(s).</p>
            </div>
            <div class="col rounded bg-light">
                <h3>Start Scenarios</h3>
                @foreach (StartScenario scenario in StartScenarios)
                {
                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">@scenario.Title</h5>
                            <p class="card-text">@scenario.Body</p>
                            <a href="#" class="card-link">See more ></a>
                        </div>
                    </div>
                }
                <p class="text-muted">Found @(StartScenarios.Count) scenario(s).</p>
            </div>
            <div class="col-5 rounded bg-light">
                <h3>Create a Custom Campaign</h3>
                <form id="registerForm" method="post">
                    <h2>Create a new account.</h2>
                    <hr />
                    <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                    <div class="form-floating mb-3">
                        <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label asp-for="Input.Email">Email</label>
                        <span asp-validation-for="Input.Email" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label asp-for="Input.Password">Password</label>
                        <span asp-validation-for="Input.Password" class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input asp-for="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                        <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
                    </div>
                    <button id="registerSubmit" type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                </form>            
            </div>
        </div>
    }
</div>

@code {
    private User? User { get; set; } = null;
    private List<CampaignModel> Campaigns { get; set; } = new();
    private List<StartScenario> StartScenarios { get; set; } = new();

    [BindProperty]
    private string CharacterName { get; set; } = "";
    [BindProperty]
    private string CustomStartScenario { get; set; } = "";
    
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthProvider.GetAuthenticationStateAsync();
        User = await UserManager.GetUserAsync(authState.User)
                    ?? throw new AuthenticationException("User is not authorized");
        Campaigns = await PersisterService.GetCampaignsForUser(User);
        StartScenarios = await PersisterService.GetStartScenarios();
    }

    private async Task OnPostAsync()
    {
        Console.WriteLine(CharacterName);
        CharacterName = "";
        StateHasChanged();
    }
}