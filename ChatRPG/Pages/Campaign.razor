@page "/Campaign"
@using ChatRPG.Data
@using ChatRPG.API
@using Microsoft.IdentityModel.Tokens
@using OpenAiGptMessage = ChatRPG.API.OpenAiGptMessage
@inject IConfiguration Configuration
@inject IOpenAiLlmClient OpenAiLlmClient;
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Campaign</PageTitle>

<div class="text-center mx-auto">
    <h1>Campaign</h1>
</div>

<div class="conversation mx-auto col-8 mt-4 rounded p-5 text-black">
    <div class="conversation-text">
        @foreach (OpenAiGptMessage message in _conversation)
        {
            <OpenAiGptMessageComponent OpenAiGptMessage="@message"/>
        }
        @if (!_tempMessage.IsNullOrEmpty())
        {
            <div class="@("assistant-message-container")">
                <p class="@("assistant-message")">Assistant: @_tempMessage</p>
            </div>
        }
    </div>
</div>

<div class="container">
    <div class="input-group mx-auto col-8 mt-2 mb-5 input-group-border">
        <input type="text" style="resize:vertical;" class="form-control user-prompt custom-text-field"
               @bind="_userInput" placeholder="What do you do?" @onkeyup="@EnterKeyHandler" disabled="@_isWaitingForResponse"/>
        <div class="input-group-append">
            <button class="btn btn-primary ml-2" type="button" @onclick="SendPrompt" disabled="@_isWaitingForResponse">
                Send
            </button>
        </div>
    </div>
</div>

<span id="bottom-id"></span>

@code {
    private string? _loggedInUsername;
    private bool _shouldSave;
    private IJSObjectReference? _scrollJsScript;
    private FileUtility? _fileUtil;
    readonly List<OpenAiGptMessage> _conversation = new();
    private string _userInput = "";
    private string _tempMessage = "";
    private bool _shouldStream;
    private bool _isWaitingForResponse;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _loggedInUsername = authenticationState.User.Identity?.Name;
        if (_loggedInUsername != null) _fileUtil = new FileUtility(_loggedInUsername);
        _shouldSave = Configuration.GetValue<bool>("SaveConversationsToFile");
        _shouldStream = !Configuration.GetValue<bool>("UseMocks") && Configuration.GetValue<bool>("StreamChatCompletions");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _scrollJsScript ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/scroll.js");
        }
    }

    async Task EnterKeyHandler(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SendPrompt();
        }
    }

    private async Task SendPrompt()
    {
        if (string.IsNullOrWhiteSpace(_userInput))
        {
            return;
        }
        _isWaitingForResponse = true;

        OpenAiGptMessage userInput = new OpenAiGptMessage("user", _userInput);
        _conversation.Add(userInput);

        if (_shouldStream)
        {
            await HandleStreamedResponse(OpenAiLlmClient.GetStreamedChatCompletion(_conversation.ToArray()));
        }
        else
        {
            string response = await OpenAiLlmClient.GetChatCompletion(_conversation.ToArray());
            HandleResponse(response);
        }

        if (_shouldSave && _fileUtil != null)
        {
            string assistantOutput = _conversation.Last().Content;
            await _fileUtil.UpdateSaveFileAsync(new MessagePair(_userInput, assistantOutput));
        }

        _userInput = "";
        StateHasChanged();
        await ScrollToElement("bottom-id");
        _isWaitingForResponse = false;
    }

    private void HandleResponse(string response)
    {
        OpenAiGptMessage assistantOutput = new OpenAiGptMessage("assistant", response);
        _conversation.Add(assistantOutput);
    }

    private async Task HandleStreamedResponse(IAsyncEnumerable<string> streamedResponse)
    {
        await foreach (string res in streamedResponse)
        {
            _tempMessage += res;
            StateHasChanged();
            await ScrollToElement("bottom-id");
        }
        HandleResponse(_tempMessage);
        _tempMessage = "";
    }

    private async Task ScrollToElement(string elementId)
    {
        await _scrollJsScript!.InvokeVoidAsync("ScrollToId", elementId);
    }

}
